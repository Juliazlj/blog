(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{512:function(t,e,l){"use strict";l.r(e);var r=l(4),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"let-和var"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#let-和var"}},[t._v("#")]),t._v(" let 和var")]),t._v(" "),l("ul",[l("li",[t._v("let 声明的范围是块作用域，而 var 声明的范围是函数作 用域。")]),t._v(" "),l("li",[t._v("就是 let 声明的变量不会，在作用域中被提升。")]),t._v(" "),l("li",[t._v("使用 let 在全局作用域中声明的变量不会成为 window 对象的属性。")]),t._v(" "),l("li",[t._v("在 let 出现之前， for 循环定义的迭代变量会渗透到循环体外 部")])])])}),[],!1,null,null,null);e.default=a.exports}}]);